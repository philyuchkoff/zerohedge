package main

import (
	"context"
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log/slog"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

const (
	ZeroHedgeURL   = "https://www.zerohedge.com/"
	LastPostFile   = "last_post.txt"
	TelegramBotAPI = "https://api.telegram.org/bot%s/sendMessage"
	MaxRetries     = 3
	RetryDelay     = 5 * time.Second
)

var (
	TelegramToken  = os.Getenv("TG_TOKEN")  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
	TelegramChatID = os.Getenv("TG_CHAT_ID")
	LogFile        = "zerohedge_monitor.log"
)

type LastPost struct {
	URL  string `json:"url"`
	Hash string `json:"hash"`
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
func setupLogger() (*slog.Logger, error) {
	logFile, err := os.OpenFile(LogFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–≥-—Ñ–∞–π–ª: %w", err)
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª + –∫–æ–Ω—Å–æ–ª—å
	multiWriter := io.MultiWriter(os.Stdout, logFile)

	logger := slog.New(
		slog.NewJSONHandler(multiWriter, &slog.HandlerOptions{
			Level:     slog.LevelDebug,
			AddSource: true,
		}),
	)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	slog.SetDefault(logger)
	return logger, nil
}

// –õ–æ–≥–∏—Ä—É—é—â–∏–π HTTP-–∫–ª–∏–µ–Ω—Ç
type loggingRoundTripper struct {
	proxied http.RoundTripper
}

func (lrt loggingRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {
	slog.Debug("HTTP –∑–∞–ø—Ä–æ—Å",
		"method", req.Method,
		"url", req.URL,
		"headers", req.Header,
	)

	resp, err := lrt.proxied.RoundTrip(req)
	if err != nil {
		slog.Error("HTTP –æ—à–∏–±–∫–∞", "err", err)
		return nil, err
	}

	slog.Debug("HTTP –æ—Ç–≤–µ—Ç",
		"status", resp.Status,
		"headers", resp.Header,
	)

	return resp, nil
}

var httpClient = &http.Client{
	Timeout:   30 * time.Second,
	Transport: loggingRoundTripper{proxied: http.DefaultTransport},
}

// [–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (fetchWithRetries, sendToTelegram –∏ –¥—Ä.) –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, 
// –Ω–æ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç slog –≤–º–µ—Å—Ç–æ log]

// –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func getLatestArticle(ctx context.Context) (string, error) {
	logger := slog.FromContext(ctx)
	logger.Info("–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç—å–∏")

	resp, err := fetchWithRetries(ZeroHedgeURL)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ", "err", err)
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: %w", err)
	}
	defer resp.Body.Close()

	// [–û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏]
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	logger, err := setupLogger()
	if err != nil {
		panic(fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: %v", err))
	}

	ctx := context.Background()
	ctx = slog.NewContext(ctx, logger)

	logger.Info("–ó–∞–ø—É—Å–∫ ZeroHedge Monitor", "version", "1.0")

	if err := run(ctx); err != nil {
		logger.Error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "err", err)
		errorMsg := fmt.Sprintf("üö® **–û—à–∏–±–∫–∞ –≤ ZeroHedge Monitor**\n\n%s", err)
		if err := sendToTelegram(ctx, errorMsg); err != nil {
			logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram", "err", err)
		}
		os.Exit(1)
	}
}
