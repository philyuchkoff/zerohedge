package main

import (
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

const (
	ZeroHedgeURL    = "https://www.zerohedge.com/"
	LastPostFile    = "last_post.txt"
	TelegramBotAPI  = "https://api.telegram.org/bot%s/sendMessage"
	TelegramToken   = "YOUR_TELEGRAM_BOT_TOKEN"
	TelegramChatID  = "@YOUR_CHANNEL_NAME"
	MaxRetries      = 3               // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞
	RetryDelay      = 5 * time.Second // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
)

type LastPost struct {
	URL  string `json:"url"`
	Hash string `json:"hash"`
}

// --- HTTP-–∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ ---
var httpClient = &http.Client{
	Timeout: 30 * time.Second,
}

func fetchWithRetries(url string) (*http.Response, error) {
	var lastErr error
	for i := 0; i < MaxRetries; i++ {
		resp, err := httpClient.Get(url)
		if err == nil && resp.StatusCode == http.StatusOK {
			return resp, nil
		}
		if err != nil {
			lastErr = err
		} else {
			lastErr = fmt.Errorf("HTTP %d", resp.StatusCode)
			resp.Body.Close()
		}
		time.Sleep(RetryDelay)
	}
	return nil, fmt.Errorf("–ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %v", MaxRetries, lastErr)
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram ---
func sendToTelegram(text string) error {
	apiURL := fmt.Sprintf(TelegramBotAPI, TelegramToken)
	payload := map[string]string{
		"chat_id": TelegramChatID,
		"text":    text,
	}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: %v", err)
	}

	resp, err := httpClient.Post(apiURL, "application/json", strings.NewReader(string(jsonData)))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("Telegram API –æ—à–∏–±–∫–∞ %d: %s", resp.StatusCode, body)
	}

	return nil
}

// --- –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π ---
func getLatestArticle() (string, error) {
	resp, err := fetchWithRetries(ZeroHedgeURL)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: %v", err)
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: %v", err)
	}

	// –ò—â–µ–º —Å—Ç–∞—Ç—å—é —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
	selectors := []string{
		"article a[href]",       // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
		".teaser-title a[href]", // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
		"h2 a[href]",            // –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
	}

	for _, selector := range selectors {
		if link, exists := doc.Find(selector).First().Attr("href"); exists {
			if strings.HasPrefix(link, "http") {
				return link, nil
			}
			return ZeroHedgeURL + strings.TrimPrefix(link, "/"), nil
		}
	}

	return "", errors.New("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏")
}

// --- –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ ---
func readLastPost() (LastPost, error) {
	var lastPost LastPost

	file, err := os.ReadFile(LastPostFile)
	if err != nil {
		if os.IsNotExist(err) {
			return lastPost, nil // –§–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
		}
		return lastPost, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	if err := json.Unmarshal(file, &lastPost); err != nil {
		return lastPost, fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v", err)
	}

	return lastPost, nil
}

func saveLastPost(url string) error {
	hash := md5.Sum([]byte(url))
	data, err := json.Marshal(LastPost{
		URL:  url,
		Hash: hex.EncodeToString(hash[:]),
	})
	if err != nil {
		return err
	}

	tmpFile := LastPostFile + ".tmp"
	if err := os.WriteFile(tmpFile, data, 0644); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
	}

	if err := os.Rename(tmpFile, LastPostFile); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	return nil
}

// --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–∞–Ω–∏–∫ ---
func run() (err error) {
	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("–ø–∞–Ω–∏–∫–∞: %v", r)
		}
	}()

	log.Println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π...")

	latestArticle, err := getLatestArticle()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏: %v", err)
	}

	lastPost, err := readLastPost()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
	}

	currentHash := md5.Sum([]byte(latestArticle))
	if hex.EncodeToString(currentHash[:]) == lastPost.Hash {
		log.Println("üîÑ –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ—Ç")
		return nil
	}

	log.Println("üì¢ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è!")
	content, err := getArticleContent(latestArticle)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %v", err)
	}

	summary := summarizeContent(content)
	msg := fmt.Sprintf("üì¢ **–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –Ω–∞ ZeroHedge**\n\n%s\n\nüîó %s", summary, latestArticle)

	if err := sendToTelegram(msg); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: %v", err)
	}

	if err := saveLastPost(latestArticle); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: %v", err)
	}

	log.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
	return nil
}

func main() {
	if err := run(); err != nil {
		log.Printf("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %v", err)
		// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram
		errorMsg := fmt.Sprintf("üö® **–û—à–∏–±–∫–∞ –≤ ZeroHedge Monitor**\n\n%s", err)
		if err := sendToTelegram(errorMsg); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram: %v", err)
		}
		os.Exit(1)
	}
}
