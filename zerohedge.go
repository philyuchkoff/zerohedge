package main

import (
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

const (
	ZeroHedgeURL    = "https://www.zerohedge.com/"
	LastPostFile    = "last_post.txt"
	TelegramBotAPI  = "https://api.telegram.org/bot%s/sendMessage"
	TelegramToken   = "YOUR_TELEGRAM_BOT_TOKEN" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
	TelegramChatID  = "@YOUR_CHANNEL_NAME"      // –ò–ª–∏ ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
	DeepSeekSummary = "https://api.deepseek.com/v1/summarize" // –ï—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–Ω–æ (–ø—Ä–∏–º–µ—Ä)
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç—å–∏
type LastPost struct {
	URL  string `json:"url"`
	Hash string `json:"hash"`
}

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç—å—é —Å ZeroHedge
func getLatestArticle() (string, error) {
	resp, err := http.Get(ZeroHedgeURL)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("—Å—Ç–∞—Ç—É—Å –∫–æ–¥: %d", resp.StatusCode)
	}

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v", err)
	}

	// –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç—å—é (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å—Ç–∫—É)
	latestArticle := ""
	doc.Find("article").First().Each(func(i int, s *goquery.Selection) {
		link, exists := s.Find("a").First().Attr("href")
		if exists {
			latestArticle = link
		}
	})

	if latestArticle == "" {
		return "", fmt.Errorf("—Å—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	return latestArticle, nil
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
func getArticleContent(url string) (string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v", err)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–¥ ZeroHedge)
	content := ""
	doc.Find(".article-content").Each(func(i int, s *goquery.Selection) {
		content = s.Text()
	})

	if content == "" {
		return "", fmt.Errorf("–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	return content, nil
}

// –°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç API)
func summarizeWithDeepSeek(text string) string {
	// TODO: –ï—Å–ª–∏ DeepSeek –¥–∞–µ—Ç API, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å—é–¥–∞
	return fmt.Sprintf("üìå **–°–∞–º–º–∞—Ä–∏ —Å—Ç–∞—Ç—å–∏** (–ø—Ä–∏–º–µ—Ä):\n\n%s\n\n...", text[:200])
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
func sendToTelegram(text string) error {
	apiURL := fmt.Sprintf(TelegramBotAPI, TelegramToken)
	payload := map[string]string{
		"chat_id": TelegramChatID,
		"text":    text,
	}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ JSON: %v", err)
	}

	resp, err := http.Post(apiURL, "application/json", strings.NewReader(string(jsonData)))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("Telegram API –æ—à–∏–±–∫–∞: %d", resp.StatusCode)
	}

	return nil
}

// –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ñ–∞–π–ª–∞
func getLastPost() (LastPost, error) {
	var lastPost LastPost

	if _, err := os.Stat(LastPostFile); os.IsNotExist(err) {
		return lastPost, nil
	}

	file, err := os.ReadFile(LastPostFile)
	if err != nil {
		return lastPost, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	if err := json.Unmarshal(file, &lastPost); err != nil {
		return lastPost, fmt.Errorf("–æ—à–∏–±–∫–∞ JSON: %v", err)
	}

	return lastPost, nil
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç—å–∏ –≤ —Ñ–∞–π–ª
func saveLastPost(url string) error {
	hash := md5.Sum([]byte(url))
	lastPost := LastPost{
		URL:  url,
		Hash: hex.EncodeToString(hash[:]),
	}

	jsonData, err := json.Marshal(lastPost)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ JSON: %v", err)
	}

	if err := os.WriteFile(LastPostFile, jsonData, 0644); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %v", err)
	}

	return nil
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
func main() {
	fmt.Println("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–∞ ZeroHedge...")

	latestArticle, err := getLatestArticle()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
		return
	}

	lastPost, err := getLastPost()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: %v\n", err)
	}

	currentHash := md5.Sum([]byte(latestArticle))
	currentHashStr := hex.EncodeToString(currentHash[:])

	if currentHashStr != lastPost.Hash {
		fmt.Println("üîç –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è!")

		content, err := getArticleContent(latestArticle)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %v\n", err)
			return
		}

		summary := summarizeWithDeepSeek(content)
		message := fmt.Sprintf("üì¢ **–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –Ω–∞ ZeroHedge**\n\n%s\n\nüîó –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: %s", summary, latestArticle)

		if err := sendToTelegram(message); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: %v\n", err)
			return
		}

		if err := saveLastPost(latestArticle); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞: %v\n", err)
			return
		}

		fmt.Println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
	} else {
		fmt.Println("üîÑ –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ—Ç.")
	}
}
