package main

import (
	"bytes"
	"context"
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log/slog"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const (
	ZeroHedgeURL    = "https://www.zerohedge.com/"
	LastPostFile    = "last_post.txt"
	TelegramBotAPI  = "https://api.telegram.org/bot%s/sendMessage"
	YandexTranslate = "https://translate.api.cloud.yandex.net/translate/v2/translate"
	MaxRetries      = 3
	RetryDelay      = 5 * time.Second
	LogFile         = "zerohedge_monitor.log"
)

var (
	TelegramToken   = os.Getenv("TG_TOKEN")
	TelegramChatID  = os.Getenv("TG_CHAT_ID")
	YandexAPIKey    = os.Getenv("YANDEX_TRANSLATE_KEY")
	YandexFolderID  = os.Getenv("YANDEX_FOLDER_ID")
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
type LastPost struct {
	URL  string `json:"url"`
	Hash string `json:"hash"`
}

type YandexTranslationResponse struct {
	Translations []struct {
		Text string `json:"text"`
	} `json:"translations"`
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
func setupLogger() (*slog.Logger, error) {
	logFile, err := os.OpenFile(LogFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–≥-—Ñ–∞–π–ª: %w", err)
	}

	logger := slog.New(
		slog.NewJSONHandler(io.MultiWriter(os.Stdout, logFile), &slog.HandlerOptions{
			Level:     slog.LevelDebug,
			AddSource: true,
		}),
	)

	slog.SetDefault(logger)
	return logger, nil
}

// HTTP-–∫–ª–∏–µ–Ω—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
var httpClient = &http.Client{
	Timeout: 30 * time.Second,
	Transport: loggingRoundTripper{
		proxied: http.DefaultTransport,
	},
}

type loggingRoundTripper struct {
	proxied http.RoundTripper
}

func (lrt loggingRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {
	slog.Debug("HTTP –∑–∞–ø—Ä–æ—Å", "method", req.Method, "url", req.URL.Redacted())
	resp, err := lrt.proxied.RoundTrip(req)
	if err != nil {
		slog.Error("HTTP –æ—à–∏–±–∫–∞", "err", err)
	}
	return resp, err
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func translateWithYandex(ctx context.Context, text string) (string, error) {
	if YandexAPIKey == "" || YandexFolderID == "" {
		return "", errors.New("–Ω–µ –∑–∞–¥–∞–Ω—ã Yandex API –∫–ª—é—á–∏")
	}

	payload := map[string]interface{}{
		"folder_id":           YandexFolderID,
		"texts":              []string{text},
		"targetLanguageCode": "ru",
	}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", YandexTranslate, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req.Header.Set("Authorization", "Api-Key "+YandexAPIKey)
	req.Header.Set("Content-Type", "application/json")

	resp, err := httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return "", fmt.Errorf("—Å—Ç–∞—Ç—É—Å %d: %s", resp.StatusCode, body)
	}

	var result YandexTranslationResponse
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %w", err)
	}

	if len(result.Translations) == 0 {
		return "", errors.New("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
	}

	return result.Translations[0].Text, nil
}

func getLatestArticle(ctx context.Context) (string, error) {
	resp, err := httpClient.Get(ZeroHedgeURL)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %w", err)
	}

	// –ò—â–µ–º —Å—Ç–∞—Ç—å—é (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å—Ç–∫—É)
	article := doc.Find("article").First()
	if article == nil {
		return "", errors.New("—Å—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	link, exists := article.Find("a").First().Attr("href")
	if !exists {
		return "", errors.New("—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	if !strings.HasPrefix(link, "http") {
		link = ZeroHedgeURL + strings.TrimPrefix(link, "/")
	}

	return link, nil
}

func getArticleContent(ctx context.Context, url string) (string, error) {
	resp, err := httpClient.Get(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %w", err)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä)
	content := doc.Find(".article-content").Text()
	if content == "" {
		return "", errors.New("–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	return content, nil
}

func sendToTelegram(ctx context.Context, text string) error {
	apiURL := fmt.Sprintf(TelegramBotAPI, TelegramToken)
	payload := map[string]string{
		"chat_id": TelegramChatID,
		"text":    text,
	}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %w", err)
	}

	resp, err := httpClient.Post(apiURL, "application/json", bytes.NewReader(jsonData))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("—Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
	}

	return nil
}

func processArticle(ctx context.Context, articleURL string) error {
	logger := slog.FromContext(ctx)

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
	content, err := getArticleContent(ctx, articleURL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %w", err)
	}

	// –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ Yandex
	translation, err := translateWithYandex(ctx, content)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
	summary := shortenText(translation, 500)
	message := fmt.Sprintf("üìå **–ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—å–∏**\n\n%s\n\nüîó –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é: %s", summary, articleURL)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
	if err := sendToTelegram(ctx, message); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %w", err)
	}

	logger.Info("–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func shortenText(text string, maxLen int) string {
	if len(text) <= maxLen {
		return text
	}
	return text[:maxLen] + "..."
}

func readLastPost() (LastPost, error) {
	var lastPost LastPost

	data, err := os.ReadFile(LastPostFile)
	if err != nil {
		if os.IsNotExist(err) {
			return lastPost, nil
		}
		return lastPost, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %w", err)
	}

	if err := json.Unmarshal(data, &lastPost); err != nil {
		return lastPost, fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %w", err)
	}

	return lastPost, nil
}

func saveLastPost(url string) error {
	hash := md5.Sum([]byte(url))
	data, err := json.Marshal(LastPost{
		URL:  url,
		Hash: hex.EncodeToString(hash[:]),
	})
	if err != nil {
		return err
	}

	return os.WriteFile(LastPostFile, data, 0644)
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
func run(ctx context.Context) error {
	logger := slog.FromContext(ctx)
	logger.Info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ZeroHedge")

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç—å—é
	articleURL, err := getLatestArticle(ctx)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç—å–∏: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å—Ç–∞—Ç—å—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
	lastPost, err := readLastPost()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %w", err)
	}

	currentHash := md5.Sum([]byte(articleURL))
	if hex.EncodeToString(currentHash[:]) == lastPost.Hash {
		logger.Info("–ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ—Ç")
		return nil
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
	if err := processArticle(ctx, articleURL); err != nil {
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if err := saveLastPost(articleURL); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %w", err)
	}

	return nil
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	logger, err := setupLogger()
	if err != nil {
		panic(fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: %v", err))
	}

	ctx := slog.NewContext(context.Background(), logger)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	requiredVars := []struct {
		name  string
		value string
	}{
		{"TG_TOKEN", TelegramToken},
		{"TG_CHAT_ID", TelegramChatID},
		{"YANDEX_TRANSLATE_KEY", YandexAPIKey},
		{"YANDEX_FOLDER_ID", YandexFolderID},
	}

	for _, v := range requiredVars {
		if v.value == "" {
			logger.Error("–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è", "var", v.name)
			os.Exit(1)
		}
	}

	// –ó–∞–ø—É—Å–∫
	if err := run(ctx); err != nil {
		logger.Error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "err", err)
		errorMsg := fmt.Sprintf("üö® –û—à–∏–±–∫–∞ –≤ ZeroHedge Monitor:\n\n%s", err)
		if err := sendToTelegram(ctx, errorMsg); err != nil {
			logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram", "err", err)
		}
		os.Exit(1)
	}
}
